###############################################################################
# Example Sequential Mosaicker Config
###############################################################################

# Indicate what stage of the pipeline to run
pipeline:
  stage: sequential_mosaicker

# I/O settings
# These settings work for the default AWS setup.
# The s3 buckets nitelite.metadata, nitelite.images, nitelite.referenced-images, and
# nitelite.pipeline-output are available to the pipeline inside /data/input.
# You can pull data from any of these simply by using the path relative to the bucket.
# See below for examples.
# The "&" is a yaml anchor, which allows you to reuse the same settings in
# multiple places
io_manager: &default_io_settings
  # input_dir and input_description specify the location of the input data
  input_dir: /data/input
  input_description:
    # Metadata files. This is the path relative to the input_dir.
    img_log: nitelite.metadata/220513-FH135/image.log
    imu_log: nitelite.metadata/220513-FH135/PresIMULog.csv
    gps_log: nitelite.metadata/220513-FH135/GPSLog.csv
    # Alternatively, you can specify a combined metadata file.
    # metadata: nitelite.metadata/220513-FH135/combined_metadata.csv
    # Images without georeferencing.
    images:
      # Relative to input_dir
      # 23085687 is the ID of the nadir camera. Delete it to process all images.
      directory: nitelite.images/220513-FH135/23085687
      # Only files with these extensions will be considered.
      pattern: '\.(raw|tif|tiff)$'
    # Images with georeferencing.
    referenced_images:
      # This filepath is relative to input_dir
      directory: nitelite.referenced-images/220513-FH135
      # This is a RegEx pattern. The "1" selects nadir images only.
      pattern: 'Geo\s\d+_1\.(tif|tiff)$'
  # output_dir and output_description specify where to save the output data
  output_dir: /data/output
  output_description:
    used_config: used-config.yaml
  # How often we want to checkpoint the data
  checkpoint_freq: 1

# The io_manager used to construct the training data inherits the default settings
io_manager_train:
  <<: *default_io_settings

# Coordinate reference-system employed
crs:
  # A standard CRS for cartesian coordinates
  projparams: 'EPSG:3857'

# Random state for reproducibility
random_state: 
  seed: 1592

# The data splitter is used to split the data into training and testing sets
# Even during production, we reserve a fraction of the manually-referenced images
# for testing (test_size)
data_splitter:
  test_size: 0.2 # The fraction reserved for testing

# We filter the data by altitude to focus on only images in the float phase.
# This tosses out everything below an altitude float_altitude
altitude_filter:
  column: mAltitude
  float_altitude: 13000.0
# We also filter the data by steadiness to toss out images we suspect are blurry.
steady_filter:
  column: imuGyroMag
  max_gyro: 0.075

# These are settings for the mosaicker, which loops through all the images and
# makes the mosaic.
mosaicker:
  # By leaving pixel_width blank, the pixel width is set based on the pixel width
  # of the referenced images.
  pixel_width:
  # By leaving pixel_height blank, the pixel height is set based on the pixel height
  # of the referenced images.
  pixel_height:
  dtype: uint8 # The data type of the output image. uint8 is standard.
  n_bands: 4 # RGB +Alpha = 4 ba

# The image operator is used to align and blend each pair of images.
image_operator:
  # The determinant of the homography matrix indicates how much the image
  # has been scaled up or down. A high or low determinant indicates a bad match.
  det_min: 0.6 
  det_max: 1.7
  # The minimum brightness to count as "light" relative to 1.0.
  # Used for filtering out dark images.
  required_brightness: 0.03
  # The number of pixels that must be bright to count as "light".
  # Used for filtering out dark images.
  required_bright_pixel_area: 50000
  # You can place a border around the image to help see how blending worked.
  # This value is the width of the border.
  outline: 0
